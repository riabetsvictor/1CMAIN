Перем ШаблонПоиска Экспорт;
Перем ШаблонПоискаТекстаОшибки Экспорт;
Перем ШаблонПоискаСтроки Экспорт;

Перем ADOTypesMapping Экспорт;
Перем ADOTypesMappingnNames  Экспорт;

//СЕРВИСНЫЕ ПРОЦЕДУРЫ
Функция RegExp(Строка, Шаблон,IgnoreCase) Экспорт
    RegExp = Новый COMОбъект("VBScript.RegExp");
    
    RegExp.IgnoreCase = IgnoreCase; //Игнорировать регистр
    RegExp.Global = Истина; //Поиск всех вхождений шаблона
    RegExp.MultiLine = Ложь; //Многострочный режим
    
    RegExp.Pattern = Шаблон;
    Matches=RegExp.Execute(Строка);
	кол=Matches.Count(); 
	
	Если кол=0 Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Array=Новый Массив(кол);
	i=0;
	Для каждого match из Matches Цикл 
		Array[i]=match.Value;
		i=i+1;
	КонецЦикла;
	
	Возврат Array;
КонецФункции

Функция RegExpTest(Строка, Шаблон,IgnoreCase) Экспорт
    RegExp = Новый COMОбъект("VBScript.RegExp");
    
    RegExp.IgnoreCase = IgnoreCase; //Игнорировать регистр
    RegExp.Global = Истина; //Поиск всех вхождений шаблона
    RegExp.MultiLine = Ложь; //Многострочный режим
    
    RegExp.Pattern = Шаблон;
    Возврат RegExp.Test(Строка);
КонецФункции

Функция Split(Стр, Разделитель,СчитатьПустыеСтроки=Ложь)Экспорт 
       м=Новый Массив;
       с=СтрЗаменить(СокрЛП(Стр), Разделитель, Символы.ПС);
       Для к=1 По СтрЧислоСтрок(с) Цикл
              Слово= СокрЛП(СтрПолучитьСтроку(с,к));
               // убрать лишние пробелы
               Если СтрДлина(Слово)>0 ИЛИ СчитатьПустыеСтроки Тогда 
                      м.Добавить(Слово);
               КонецЕсли;
        КонецЦикла;
        Возврат м;
КонецФункции

Функция Split2(Стр, РазделителИ) Экспорт
       м=Новый Массив;
	   
	   СтрЗаменить=Стр;
	   Для каждого разд из РазделителИ Цикл
		   СтрЗаменить=СтрЗаменить(СокрЛП(СтрЗаменить), разд, Символы.ПС);
	   КонецЦикла;
	   
       Для к=1 По СтрЧислоСтрок(СтрЗаменить) Цикл
              Слово= СокрЛП(СтрПолучитьСтроку(СтрЗаменить,к));
               // убрать лишние пробелы
               Если СтрДлина(Слово)>0 Тогда 
                      м.Добавить(Слово);
               КонецЕсли;
        КонецЦикла;
        Возврат м;
КонецФункции

Функция АнализОшибкиЗапроса(ОписаниеОшибки, Текст) Экспорт
	Попытка
		ТекстВКонсоль="";
		массив1=RegExp(ОписаниеОшибки, ШаблонПоиска,Истина);
		
		Если массив1=Неопределено Тогда 
			Сообщить(ОписаниеОшибки); 
			Возврат "";
		КонецЕсли;
		
		ТекстОшибки=RegExp(массив1[массив1.ВГраница()],ШаблонПоискаТекстаОшибки,Истина);
		
		ТекстВКонсоль=?((ТекстОшибки<>Неопределено) И ТекстОшибки.Количество()>0,СокрЛП(Прав(ТекстОшибки[0],СтрДлина(ТекстОшибки[0])-2)),"");
				
		НомераСтрок=RegExp(массив1[массив1.ВГраница()],ШаблонПоискаСтроки,Истина);
		
		Если НомераСтрок.Количество()=0 Тогда
			Возврат "";
		КонецЕсли;	
		
		НомерСтроки=НомераСтрок[0];
		
		Сообщить("Текст Запроса: Строка "+НомерСтроки+": "+ТекстВКонсоль,СтатусСообщения.Важное);
		
		МассивСтрок=Split(Текст,Символы.ПС,Истина); 		
		ВыделитьТекст=?(МассивСтрок.Количество()>0,МассивСтрок[НомерСтроки-1],"");
		
		Возврат ВыделитьТекст;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
КонецФункции

Функция АнализТекстаОшибкиПростой(ОписаниеОшибки) Экспорт
	Попытка
		массив1=RegExp(ОписаниеОшибки, ШаблонПоискаТекстаОшибки,Истина);

		Если массив1=Неопределено ИЛИ массив1.Количество()=0 Тогда 
			Возврат ОписаниеОшибки; 
		КонецЕсли;

		ТекстОшибки=СокрЛП(Прав(массив1[0],СтрДлина(массив1[0])-2));
		Возврат ТекстОшибки;
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки	
КонецФункции	

// Универсальная функция для определения размера данных (хранилища значения, двоичных данных, картинки, строки)
// Алгоритм расчета размера данных взят отсюда http://kb.mista.ru/article.php?id=386
//
// Параметры
//  <Данные>  - данные типа хранилище значений, двоичные данные, картинка, строка
//
// Возвращаемое значение:
//   РазмерДанных   - числовое значение в байтах
//
Функция ПолучитьРазмерДанных(Знач Данные)

    Если ТипЗнч(Данные) = Тип("ХранилищеЗначения") Тогда
        ДанныеХранилища = Данные.Получить();
        Если ДанныеХранилища = Неопределено Тогда
            Возврат 0;
        КонецЕсли;
        Если ТипЗнч(ДанныеХранилища) = Тип("Картинка") Тогда
            ДанныеХранилища = ДанныеХранилища.ПолучитьДвоичныеДанные();
        ИначеЕсли ТипЗнч(ДанныеХранилища) = Тип("Строка") Тогда
            Возврат СтрДлина(ДанныеХранилища);
        КонецЕсли;
        ДанныеBase64 = Base64Строка(ДанныеХранилища);
    ИначеЕсли ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
        ДанныеBase64 = Base64Строка(Данные);
    ИначеЕсли ТипЗнч(Данные) = Тип("Картинка") Тогда
        ДанныеBase64 = Base64Строка(Данные.ПолучитьДвоичныеДанные());
    Иначе
        Возврат СтрДлина(XMLСтрока(Данные));
    КонецЕсли;

    //Base64 - специальный формат хранения данных в текстовом формате
    РазмерДанных = СтрДлина(ДанныеBase64) - ?(Прав(ДанныеBase64, 1) = "=", 1, 0) - ?(Прав(ДанныеBase64, 2) = "==", 1, 0);
    РазмерДанных = Цел(РазмерДанных / 4 * 3); // в байтах

    Возврат РазмерДанных;

КонецФункции

// Функция - Тип ADOв1С
//	Преоборазует тип ADO в тип 1С
//
// Параметры:
//  ТипADO	 - 	 Тип ADO. Число. 
// 
// Возвращаемое значение:
//   Тип 1С. ОписаниеТипов. 
//
Функция ТипADOв1С(ТипADO) Экспорт
	Возврат ADOTypesMapping.Получить(Число(ТипADO));
КонецФункции	

// Функция - Получить виртуальную таблицу
//
// Параметры:
//  ПутьКИсточникуДанных - 	 - 
//  Запрос				 - 	 - 
//  Параметры			 - 	 Массив струтур, описывающих входящие параметры запроса. Ключи структуры:
//								Имя - Имя параметра,
//								Тип - тип ADO параметра в виде числа (см. соответствие ADOTypesMapping,
//								Значение - значение параметра
// 
// Возвращаемое значение:
//   Результат запроса в виде Таблицы значений
//
Функция ПолучитьВиртуальнуюТаблицу(ПутьКИсточникуДанных,Запрос,Параметры=Неопределено) Экспорт
	ЭтапПроцедуры=0;
	ТЗ=Новый ТаблицаЗначений();
	Попытка
		Соединение=Новый COMОбъект("ADODB.Connection");
		Соединение.ConnectionString=ПутьКИсточникуДанных;
		ЭтапПроцедуры=1;//Открытие соединения
		Соединение.Open();
		
		ЭтапПроцедуры=2; //Инициализация команды
		Команда = Новый COMОбъект("ADODB.Command");
		Команда.CommandTimeout = 100;
		Команда.CommandText = Запрос;
		Команда.CommandType = 1;
		Команда.ActiveConnection = Соединение;
		
		ЭтапПроцедуры=3; //Инициализация параметров
		Если Параметры<>Неопределено Тогда
			Для каждого Параметр из Параметры Цикл
				ЗначениеПараметра=Параметр["Значение"];
				РазмерЗначения=0;
				Тип1С=ADOTypesMapping.Получить(Число(Параметр["Тип"]));
				
				Если Тип1С.СодержитТип(Тип("ДвоичныеДанные")) Тогда
					Поток=Новый COMОбъект("ADODB.Stream");			
					Поток.Type=1;//adTypeBinary
					Поток.Open();
					Поток.LoadFromFile(ЗначениеПараметра);
					РазмерЗначения= Поток.Size;
					ЗначениеПараметра=Поток.Read();
					Поток.Close();
				Иначе
					РазмерЗначения=ПолучитьРазмерДанных(ЗначениеПараметра); 
				КонецЕсли;
					
				НовыйПараметр=Команда.CreateParameter(Параметр["Имя"],Число(Параметр["Тип"]),1,РазмерЗначения,ЗначениеПараметра);
				Команда.Parameters.Append(НовыйПараметр);
			КонецЦикла;	
		КонецЕсли;	
		
		ЭтапПроцедуры=4; //Выполнение
		НаборДанных=Команда.Execute();
		
		ЭтапПроцедуры=5; //Формирование ТЗ
		ТЗ=Новый ТаблицаЗначений();
		КолПолей=НаборДанных.Fields.Count;
		н=0;
		Пока н<=КолПолей-1 Цикл
			ТЗ.Колонки.Вставить(н,СтрЗаменить(НаборДанных.Fields.Item(н).Name," ",""),ТипADOв1С(НаборДанных.Fields.Item(н).Type)
				,НаборДанных.Fields.Item(н).Name,);
			н=н+1;
		КонецЦикла;
		
		ЭтапПроцедуры=6; //Наполенение ТЗ
		Если НаборДанных.Eof И Не НаборДанных.Bof Тогда  НаборДанных.MoveFirst(); КонецЕсли;
		Пока Не НаборДанных.Eof Цикл
			н=0;
			СтрокаТЧ=ТЗ.Добавить();
			Пока н<=КолПолей-1 Цикл
				СтрокаТЧ[н]=НаборДанных.Fields(н).Value;
				н=н+1;
			КонецЦикла;
			НаборДанных.MoveNext();			
		КонецЦикла;
	Исключение
		ОписаниеОшибки=ОписаниеОшибки();
		массив1=RegExp(ОписаниеОшибки, ШаблонПоискаТекстаОшибки,Истина);
		
		Если массив1=Неопределено ИЛИ массив1.Количество()=0 Тогда 
			Сообщить(ОписаниеОшибки); 
			Возврат "";
		КонецЕсли;
		
		ТекстОшибки=СокрЛП(Прав(массив1[0],СтрДлина(массив1[0])-2));
		
		ТекстМестаОшибки0="Ошибка в процессе получения таблицы из источника при ";
		ТекстМестаОшибки=?(ЭтапПроцедуры=0,"иниициализации соединения.",
			?(ЭтапПроцедуры=1,"открытии соединения.",
			?(ЭтапПроцедуры=2,"иниициализации команды.",
			?(ЭтапПроцедуры=3,"иниициализации параметров.",
			?(ЭтапПроцедуры=4,"выполнении команды",
			?(ЭтапПроцедуры=5,"фомировании таблицы значений.",
			?(ЭтапПроцедуры=6,"заполонении табдлицы значений.","[не установлено]")))))));
		
		Сообщить(ТекстМестаОшибки0+ТекстМестаОшибки+Символы.ПС+ТекстОшибки,СтатусСообщения.Важное);
	КонецПопытки	;
	
	Если Соединение<>Неопределено Тогда 
		Соединение.Close();
		Если Команда<>Неопределено Тогда
			Команда=0;
		КонецЕсли;
		
		Если НаборДанных<>Неопределено Тогда
			НаборДанных=0;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТЗ;
КонецФункции	

// Функция - Менеджер объекта по ссылке
// Возвращает менеджер объекта по переданной ссылке.
// Не обрабатываются точки маршрутов бизнес-процессов.
//		https://helpf.pro/faq/view/633.html
//
// Параметры:
//  Ссылка	 - 	 Ссылка на объект 
// 
// Возвращаемое значение:
//   Менеджер объекта метаданных 
//
Функция МенеджерОбъектаПоСсылке(Ссылка) Экспорт
	ИмяОбъекта = Ссылка.Метаданные().Имя;
    ТипСсылки = ТипЗнч(Ссылка);
      
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат Справочники[ИмяОбъекта];
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат Документы[ИмяОбъекта];
	ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат БизнесПроцессы[ИмяОбъекта];
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат ПланыВидовХарактеристик[ИмяОбъекта];
	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат ПланыСчетов[ИмяОбъекта];
	ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат ПланыВидовРасчета[ИмяОбъекта];
	ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат Задачи[ИмяОбъекта]; 
	ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
   		Возврат ПланыОбмена[ИмяОбъекта];
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
   		Возврат Перечисления[ИмяОбъекта];
	Иначе
  		Возврат НеОпределено;
	КонецЕсли;
КонецФункции

// Функция - Создать объект по ссылке
//	Создает новый объект на основе типа переданного объекта.
//
// Параметры:
//  Ссылка	 - 	 Ссылка на объект 
// 
// Возвращаемое значение:
//   Новый объект на основе типа переданного объекта или НеОпределено, если тип объекта не поддерживается. 
//		Поддерживаются: Справочники, Документы.
//
Функция СоздатьОбъектПоСсылке(Ссылка) Экспорт
	ИмяОбъекта = Ссылка.Метаданные().Имя;
    ТипСсылки = ТипЗнч(Ссылка);
      
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат Справочники[ИмяОбъекта].СоздатьЭлемент();
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат Документы[ИмяОбъекта].СоздатьДокумент();
	Иначе
  		Возврат НеОпределено;
	КонецЕсли;
КонецФункции

//
//СОХРАНЕНИЕ И ВОССТАНОВЛЕНИЕ СОСТОЯНИЙ ФОРМЫ
//

// Функция - Получить состояния формы из файла
//	 Из файла сохраненных настроек читает список состояний и возвращает их в виде описания(см. возвращаемое значение)
//	 Имя файла формируется по формуле "GroupChangesSettings"+ИмяФайлаТекущейОбработки+".xml"
//
// Параметры:
//  ПутьКФайлуТекущейОбработки	 - 	 Путь к файлу текущей обработки 
//  ИмяФайлаТекущейОбработки	 - 	 Имя файла текущей обработки
//	ИмяФормы					 -	 Имя формы
// 
// Возвращаемое значение:
//   Возвращет Список(массив) состояний формы, содержащий структуры, описывающие сосотояния.
//	 Каждая структура содержит ключи:
//		"Имя" 						-Имя состояния,
//		"ИспользоватьПриОткрытии" 	-Булево,
//		"СостоянияЭлементов" 		-Массив состояний конечных элементов, содержащий последовательно: Имя, Тип Восстановления, Имя Восстановления, 
//										множество значений,
//		"СостоянияРеквизитов"		-Массив состояний реквизитов, содержащий последовательно: Имя, Значение
//
//		Массив<МассивСостояний>
//		[
//			Структура<СтруктураСостояния>
//			[
//				Имя,
//				ИспользоватьПриОткрытии,
//				Массив<СостоянияЭлементов>
//				[
//					Массив<СостояниеЭлемента>
//					[
//						Имя,
//						ТипВосстановления,
//						ИмяВосстановления,
//						Значения[1..N]
//					]
//				],
//				Массив<СостоянияРеквизитов>
//				[
//					Имя,
//					Значение[1..1]
//				]
//			]
//		]
//			
Функция ПолучитьСостоянияФормыИзФайла(ПутьКФайлуТекущейОбработки,ИмяФайлаТекущейОбработки,ИмяФормы) Экспорт
	МассивСостояний=Новый Массив();
	
	Попытка
		ФайлНастроек=Новый Файл(ПутьКФайлуТекущейОбработки+"GroupChangesSettings"+ИмяФайлаТекущейОбработки+".xml");	
		Если Не ФайлНастроек.Существует() Тогда Возврат МассивСостояний;КонецЕсли;
		
		ЧтениеXML=Новый ЧтениеXML();
		ЧтениеТекста=Новый ЧтениеТекста(ФайлНастроек.ПолноеИмя,,,,Ложь);
		СтрокаТекста=ЧтениеТекста.Прочитать();
		Если ПустаяСтрока(СтрокаТекста) Тогда 
			ЧтениеТекста.Закрыть();
			Возврат МассивСостояний;
		КонецЕсли;
		ЧтениеТекста.Закрыть();
		
		ЧтениеXML.ОткрытьФайл(ФайлНастроек.ПолноеИмя,,,);
		
		ПостроительDOM=Новый ПостроительDOM();
		ДокументDOM=ПостроительDOM.Прочитать(ЧтениеXML);
		ЧтениеXML.Закрыть();
		
		УзелФормыИскомый=Неопределено;
		УзелФорм=ДокументDOM.ПолучитьЭлементыПоИмени("Form");
		Если УзелФорм.Количество()>0 Тогда 
			Для каждого УзелФормы из УзелФорм Цикл
				УзелИмяФормы=УзелФормы.ПолучитьЭлементыПоИмени("Name");
				Если УзелИмяФормы.Количество()>0 И УзелИмяФормы.Элемент(0).ПервыйДочерний<>Неопределено
					И УзелИмяФормы.Элемент(0).ПервыйДочерний.ЗначениеУзла=ИмяФормы Тогда 
					УзелФормыИскомый=УзелФормы;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		
		Если УзелФормыИскомый=Неопределено Тогда Возврат МассивСостояний;КонецЕсли;
		
		УзелСостояний=УзелФормыИскомый.ПолучитьЭлементыПоИмени("StatesSaved");
		Если УзелСостояний.Количество()>0 Тогда
			Для каждого Узел из УзелСостояний.Элемент(0).ДочерниеУзлы Цикл
				СтруктураСостояния=Новый Структура();
				//Получить Имя состояния
				Имена=Узел.ПолучитьЭлементыПоИмени("Name");
				Если Имена.Количество()=0 Тогда Продолжить;КонецЕсли;
				УзелИмени=Имена.Элемент(0).ПервыйДочерний;
				Если УзелИмени=Неопределено Тогда Продолжить;КонецЕсли;
				СтруктураСостояния.Вставить("Имя",УзелИмени.ЗначениеУзла);
				
				//Получить признак Использовать при открытии
				UseOnOpens=Узел.ПолучитьЭлементыПоИмени("UseOnOpen");
				Если UseOnOpens.Количество()=0 Тогда 
					СтруктураСостояния.Вставить("ИспользоватьПриОткрытии",Ложь);
				Иначе
					УзелUseOnOpen=UseOnOpens.Элемент(0).ПервыйДочерний;
					СтруктураСостояния.Вставить("ИспользоватьПриОткрытии",?(УзелUseOnOpen=Неопределено,Ложь,Булево(Число(УзелUseOnOpen.ЗначениеУзла))));
				КонецЕсли;
				
				//Получить сохраенные значения элементов формы
				УзелControls=Узел.ПолучитьЭлементыПоИмени("Controls");
				МассивЭлементов=Новый Массив();
				
				Если УзелControls.Количество()>0 Тогда
					
					Для каждого ЭлемУпр из УзелControls.Элемент(0).ДочерниеУзлы Цикл
						УзелИмя=ЭлемУпр.ПолучитьЭлементыПоИмени("Name");
						УзелСвойство=ЭлемУпр.ПолучитьЭлементыПоИмени("Property");
						УзелМетод=ЭлемУпр.ПолучитьЭлементыПоИмени("Method");
						УзелЗнч=ЭлемУпр.ПолучитьЭлементыПоИмени("Value");
						
						Если УзелИмя.Количество()>0 И (УзелСвойство.Количество()>0  ИЛИ УзелМетод.Количество()>0) 
								И УзелЗнч.Количество()>0 
								Тогда
							УзелИмениТекст=УзелИмя.Элемент(0).ПервыйДочерний;	
							УзелСвойствоТекст=УзелСвойство.Элемент(0).ПервыйДочерний;	
							УзелМетодТекст=УзелМетод.Элемент(0).ПервыйДочерний;
							
							Если  УзелИмениТекст<>Неопределено И (УзелСвойствоТекст<>Неопределено ИЛИ УзелМетодТекст<>Неопределено)
									Тогда
								СостояниеЭлемента=Новый Массив();
								СостояниеЭлемента.Добавить(УзелИмениТекст.ЗначениеУзла);
								
								СвойствоИлиМетод=?(УзелСвойствоТекст=Неопределено,?(УзелМетодТекст=Неопределено,"","Method"),"Property");
								Если ПустаяСтрока(СвойствоИлиМетод) Тогда
									ВызватьИсключение НСтр("ru='Указан некорректный тип восстановления "+УзелСвойствоТекст+". Допустимы: Свойство, Метод.'");
								КонецЕсли;
								
								СостояниеЭлемента.Добавить(?(СвойствоИлиМетод="Method","Метод","Свойство"));
								СостояниеЭлемента.Добавить(?(СвойствоИлиМетод="Method",УзелМетодТекст.ЗначениеУзла,УзелСвойствоТекст.ЗначениеУзла));
								
								Для каждого знч из УзелЗнч Цикл
									УзелЗнчТекст=знч.ПервыйДочерний; 																	
									СостояниеЭлемента.Добавить(УзелЗнчТекст.ЗначениеУзла);
								КонецЦикла;	
								
								МассивЭлементов.Добавить(СостояниеЭлемента);
							КонецЕсли;		
						КонецЕсли;		
					КонецЦикла;
				КонецЕсли;	
				
				СтруктураСостояния.Вставить("СостоянияЭлементов",МассивЭлементов);
				
				 //Получить сохраенные значения реквизитолв
				УзелAttributes=Узел.ПолучитьЭлементыПоИмени("Attributes");
				МассивРеквизитов=Новый Массив();
				
				Если УзелAttributes.Количество()>0 Тогда
					Для каждого РеквизитФормы из УзелAttributes.Элемент(0).ДочерниеУзлы Цикл
						УзелИмя=РеквизитФормы.ПолучитьЭлементыПоИмени("Name");
						УзелЗнч=РеквизитФормы.ПолучитьЭлементыПоИмени("Value");
						
						Если УзелИмя.Количество()>0 И УзелЗнч.Количество()>0 Тогда
							УзелИмениТекст=УзелИмя.Элемент(0).ПервыйДочерний;	
							
							Если  УзелИмениТекст<>Неопределено Тогда
								СостояниеРеквизита=Новый Массив();
								СостояниеРеквизита.Добавить(УзелИмениТекст.ЗначениеУзла);
								
								УзелЗнчТекст=УзелЗнч.Элемент(0).ПервыйДочерний; 																	
								СостояниеРеквизита.Добавить(УзелЗнчТекст.ЗначениеУзла);
								
								МассивРеквизитов.Добавить(СостояниеРеквизита);
							КонецЕсли;			
						КонецЕсли;		
					КонецЦикла;
				КонецЕсли;	
				
				СтруктураСостояния.Вставить("СостоянияРеквизитов",МассивРеквизитов);
				МассивСостояний.Добавить(СтруктураСостояния);
			КонецЦикла;
		КонецЕсли;
	Исключение
		Сообщить("Восстановить сосотяние формы не удалось."+Символы.ПС+ ОписаниеОшибки(),СтатусСообщения.Важное);
	КонецПопытки;
	
	Возврат  МассивСостояний;
КонецФункции	

// Процедура - Восстановить состояние формы
//
// Параметры:
//  МассивСостоянийЭлементовФормы	 - 	 Массив состояний элементов формы	 . М.б. получен из структуры, описывающей состояние формы,
//											по ключу "СостоянияЭлементов". Саму струтуру можно получить методом ПолучитьСостоянияФормыИзФайла.
//  МассивСостоянийРеквизитовФормы	 -	 Массив состояний реквизитов формы . М.б. получен из структуры, описывающей состояние формы,
//											по ключу "СостоянияРеквизитов". Саму струтуру можно получить методом ПолучитьСостоянияФормыИзФайла.
//  ЭтаФорма						 - 	 Форма, состяние которой восстанавливается. 
//
Процедура ВосстановитьСостояниеФормы(ЭтаФорма,МассивСостоянийЭлементовФормы=Неопределено,МассивСостоянийРеквизитовФормы=Неопределено) Экспорт
	ИмяОбъектаДляОшибки="";
	Попытка
		Если МассивСостоянийЭлементовФормы<>Неопределено Тогда
			Для каждого состояние из МассивСостоянийЭлементовФормы Цикл
				ИмяОбъектаДляОшибки=состояние[0];
				Знч=Новый Массив();
				
				Для н=3 по состояние.Количество()-1 Цикл
					Знч.Добавить(ЗначениеИзСтрокиВнутр(состояние[н]));
				КонецЦикла;	
				
				Аргументы="";
				н=0;
				Для каждого ЭЗнч из Знч Цикл
					Аргументы=Аргументы+?(н>0,",ЭЗнч","ЭЗнч");
					Если состояние[1]="Свойство" Тогда Прервать;КонецЕсли;
					н=н+1;
				КонецЦикла;	
				
				Команда="ЭтаФорма.ЭлементыФормы."+состояние[0]+"."+состояние[2]+
						?(состояние[1]="Свойство","=ЭЗнч;",?(состояние[1]="Метод","("+Аргументы+");",""));
				
				Выполнить(Команда);
			КонецЦикла;
		КонецЕсли;	
		
		Если МассивСостоянийРеквизитовФормы<>Неопределено Тогда
			Для каждого состояние из МассивСостоянийРеквизитовФормы Цикл
				ИмяОбъектаДляОшибки=состояние[0];
				Знч=ЗначениеИзСтрокиВнутр(состояние[1]);					
				Команда="ЭтаФорма."+состояние[0]+"=Знч;";
				
				Выполнить(Команда);
			КонецЦикла;
		КонецЕсли;	
	Исключение
		Сообщить("Не удалось восставоновить "+ИмяОбъектаДляОшибки+". По причине"+ОписаниеОшибки(),СтатусСообщения.Важное);
	КонецПопытки;	
КонецПроцедуры	

// Процедура - Сохранить состояние формы в файл
//	Выполняет сохранение переданных состояний элементов формы и реквизитов в файл
//
// Параметры:
//  ПутьКФайлуТекущейОбработки	 - 	 Путь к файлу текущей обработки
//  ИмяФайлаТекущейОбработки	 - 	 Имя файла текущей обработки
//	ИмяФормы					 -	 Имя формы
//  ИмяСостояния				 - 	 Имя состояния
//  ИспользоватьПриОткрытии		 - 	 Булево
//  ДанныеДляСохранения			 - 	 - Массив структур с ключами. Можно использовать для элементов управления не связанных с данными.
//									   Ключи: 
//										"Имя" -Имя элемента управления,
//										"ТипВосстановления" -Тип восстановления(Свойство или Метод),
//										"ИмяВосстановления" -Имя восстанавливаемого свойства или метода восстановления
//										"Значения" -Массив значений для восстановления (, которые будут использоваться как аргументы метода или присваиваться свойству
//											в значении по ключу Тип восстановления)
//  РеквизитыДляСохранения		 - 	 Массив структур с ключами:
//										"Имя" -Имя реквизита,
//										"Значение" -Значение реквизита
//
Процедура СохранитьСостояниеФормыВФайл(ПутьКФайлуТекущейОбработки,ИмяФайлаТекущейОбработки,ИмяФормы,
	ИмяСостояния, ИспользоватьПриОткрытии,
	ДанныеДляСохранения,РеквизитыДляСохранения) Экспорт
	Попытка
		ПолноеИмяФайлаНастроек=ПутьКФайлуТекущейОбработки+"GroupChangesSettings"+ИмяФайлаТекущейОбработки+".xml";
		ФайлНастроек=Новый Файл(ПолноеИмяФайлаНастроек);
		
		ЧтениеТекста=Новый ЧтениеТекста(ФайлНастроек.ПолноеИмя,,,,Ложь);
		СтрокаТекста=ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
			
		Если Не ФайлНастроек.Существует() ИЛИ ПустаяСтрока(СтрокаТекста) Тогда  
			XML=Новый ТекстовыйДокумент();
			XML.УстановитьТекст("<root></root>");
			XML.Записать(ПолноеИмяФайлаНастроек,,Символы.ПС);
		КонецЕсли;	
		
		ЧтениеXML=Новый ЧтениеXML();
		ЧтениеXML.ОткрытьФайл(ФайлНастроек.ПолноеИмя,,,);
		
		Попытка
			Если Не ЧтениеXML.Прочитать() Тогда
				ЧтениеXML.Закрыть();
				XML=Новый ТекстовыйДокумент();
				XML.УстановитьТекст("<root></root>");
				XML.Записать(ПолноеИмяФайлаНастроек,,Символы.ПС);
				ЧтениеXML.ОткрытьФайл(ФайлНастроек.ПолноеИмя,,,);
			КонецЕсли;
		Исключение
			Если Вопрос("Содержимое файла не может быть прочитано по причине:"+ОписаниеОшибки()+ОписаниеОшибки()+Символы.ПС+"Перезаписать файл?",
				РежимДиалогаВопрос.ДаНет,,,"Запрос на изменение",)=КодВозвратаДиалога.Нет Тогда Возврат;
			Иначе
				ЧтениеXML.Закрыть();
				XML=Новый ТекстовыйДокумент();
				XML.УстановитьТекст("<root></root>");
				XML.Записать(ПолноеИмяФайлаНастроек,,Символы.ПС);
				ЧтениеXML.ОткрытьФайл(ФайлНастроек.ПолноеИмя,,,);
			КонецЕсли;	
		Конецпопытки;
		
		ПостроительDOM=Новый ПостроительDOM();
		ДокументDOM=ПостроительDOM.Прочитать(ЧтениеXML);
		ЧтениеXML.Закрыть();
		
		КореньДокумета=ДокументDOM.ЭлементДокумента;
		Если КореньДокумета=Неопределено Тогда
			КореньДокумета=ДокументDOM.СоздатьЭлемент("root");	
			ДокументDOM.ДобавитьДочерний(КореньДокумета);
		КонецЕсли;
		
		УзелФормыИскомый=Неопределено;
		УзелФорм=КореньДокумета.ПолучитьЭлементыПоИмени("Form");
		Если УзелФорм.Количество()>0 Тогда 
			Для каждого УзелФормы из УзелФорм Цикл
				УзелИмяФормы=УзелФормы.ПолучитьЭлементыПоИмени("Name");
				Если УзелИмяФормы.Количество()>0 И УзелИмяФормы.Элемент(0).ПервыйДочерний<>Неопределено 
					И УзелИмяФормы.Элемент(0).ПервыйДочерний.ЗначениеУзла=ИмяФормы Тогда 
					УзелФормыИскомый=УзелФормы;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если УзелФормыИскомый=Неопределено Тогда
			УзелФормыИскомый=ДокументDOM.СоздатьЭлемент("Form");
			КореньДокумета.ДобавитьДочерний(УзелФормыИскомый);
			
			УзелИмяФормы=ДокументDOM.СоздатьЭлемент("Name");
			УзелФормыИскомый.ДобавитьДочерний(УзелИмяФормы);
			УзелИмяФормыТекст=ДокументDOM.СоздатьТекстовыйУзел(ИмяФормы);
			УзелИмяФормы.ДобавитьДочерний(УзелИмяФормыТекст);
		КонецЕсли;	
		
		УзелСостояний=УзелФормыИскомый.ПолучитьЭлементыПоИмени("StatesSaved");
		Если УзелСостояний.Количество()=0 Тогда
			УзелСостояний=ДокументDOM.СоздатьЭлемент("StatesSaved");
			УзелФормыИскомый.ДобавитьДочерний(УзелСостояний);
		Иначе УзелСостояний=УзелСостояний.Элемент(0);	
		КонецЕсли;	
		
		ЕстьМод=Ложь;
		
		УзелСостоянияИскомый=Неопределено;
		УзлыСостояний=УзелСостояний.ПолучитьЭлементыПоИмени("State");
		Для каждого УзелСостояния из УзлыСостояний Цикл
			УзелИмяСостояния=УзелСостояния.ПолучитьЭлементыПоИмени("Name");
			Если УзелИмяСостояния.Количество()>0 Тогда
				ИмяСостоянияТекст=УзелИмяСостояния.Элемент(0).ПервыйДочерний;				
				Если ИмяСостоянияТекст<>Неопределено И ИмяСостоянияТекст.ЗначениеУзла=ИмяСостояния Тогда
					 УзелСостоянияИскомый=УзелСостояния;
				КонецЕсли;									
			КонецЕсли;	
		КонецЦикла;
		
		Если УзелСостоянияИскомый=Неопределено Тогда
			УзелСостоянияИскомый=ДокументDOM.СоздатьЭлемент("State");	
			УзелСостояний.ДобавитьДочерний(УзелСостоянияИскомый);
			
			УзелИмяСостояния=ДокументDOM.СоздатьЭлемент("Name");	
			УзелСостоянияИскомый.ДобавитьДочерний(УзелИмяСостояния);
			
			ИмяСостоянияТекст=ДокументDOM.СоздатьТекстовыйУзел(ИмяСостояния);	
			УзелИмяСостояния.ДобавитьДочерний(ИмяСостоянияТекст);
		КонецЕсли;	
		
		УзелИспользоватьПриОткрытии=УзелСостоянияИскомый.ПолучитьЭлементыПоИмени("UseOnOpen");
		Если УзелИспользоватьПриОткрытии.Количество()>0 Тогда
			УзелИспользоватьПриОткрытии=УзелИспользоватьПриОткрытии.Элемент(0);
		Иначе	
			УзелИспользоватьПриОткрытии=ДокументDOM.СоздатьЭлемент("UseOnOpen");	 
			УзелСостоянияИскомый.ДобавитьДочерний(УзелИспользоватьПриОткрытии);
		КонецЕсли;
		
		ИспользоватьПриОткрытииТекст=УзелИспользоватьПриОткрытии.ПервыйДочерний;
		Если ИспользоватьПриОткрытииТекст=Неопределено Тогда
			ИспользоватьПриОткрытииТекст=ДокументDOM.СоздатьТекстовыйУзел(Строка(Число(ИспользоватьПриОткрытии)));	
			УзелИспользоватьПриОткрытии.ДобавитьДочерний(ИспользоватьПриОткрытииТекст);
		Иначе
			ИспользоватьПриОткрытииТекст.ЗначениеУзла=Строка(Число(ИспользоватьПриОткрытии));
		КонецЕсли;	
		
		//Сохранение состояния Элементов Формы
		УзлыЭлементов=Неопределено;
		УзлыЭлементовМассив=УзелСостоянияИскомый.ПолучитьЭлементыПоИмени("Controls");
		Если УзлыЭлементовМассив.Количество()=0 Тогда
			УзлыЭлементов=ДокументDOM.СоздатьЭлемент("Controls");	
			УзелСостоянияИскомый.ДобавитьДочерний(УзлыЭлементов);
		Иначе УзлыЭлементов=УзлыЭлементовМассив.Элемент(0);	
		КонецЕсли;	
		
		СписокУзловЭлементов=Новый Массив();
		Для каждого УзелЭлемент из УзлыЭлементов.ПолучитьЭлементыПоИмени("Control") Цикл
			УзелСтруктура=Новый Структура();
			
			УзелИмяЭлемента=УзелЭлемент.ПолучитьЭлементыПоИмени("Name");
			УзелСтруктура.Вставить("Имя",УзелИмяЭлемента.Элемент(0).ПервыйДочерний.ЗначениеУзла);
			
			УзелСтруктура.Вставить("Элемент",УзелЭлемент);
			
			СписокУзловЭлементов.Добавить(УзелСтруктура);
		КонецЦикла;	
		
		Для каждого Элемент из ДанныеДляСохранения Цикл
			УЭлементИскомый=Неопределено;
			Для каждого УЭлемент из СписокУзловЭлементов Цикл
			    Если УЭлемент["Имя"]=Элемент["Имя"] Тогда УЭлементИскомый=УЭлемент["Элемент"];Прервать;КонецЕсли;
			КонецЦикла;
			
			Если УЭлементИскомый=Неопределено Тогда
				УЭлементИскомый=ДокументDOM.СоздатьЭлемент("Control");
				УзлыЭлементов.ДобавитьДочерний(УЭлементИскомый);
				
				ИмяУЭлементИскомый=ДокументDOM.СоздатьЭлемент("Name");
				УЭлементИскомый.ДобавитьДочерний(ИмяУЭлементИскомый);
				ИмяТекстУЭлементИскомый=ДокументDOM.СоздатьТекстовыйУзел(Элемент["Имя"]);
				ИмяУЭлементИскомый.ДобавитьДочерний(ИмяТекстУЭлементИскомый);
			КонецЕсли;	
			
			СвойствоИлиМетод=?(Элемент["ТипВосстановления"]="Свойство","Property",?(Элемент["ТипВосстановления"]="Метод","Method",""));
			Если ПустаяСтрока(СвойствоИлиМетод) Тогда
				ВызватьИсключение НСтр("ru='Указан некорректный тип восстановления "+Элемент["ТипВосстановления"]+". Допустимы: Свойство, Метод.'");
			КонецЕсли;
			
			СвойствоУЭлементИскомый=УЭлементИскомый.ПолучитьЭлементыПоИмени("Property");
			Если СвойствоУЭлементИскомый.Количество()>0 Тогда СвойствоУЭлементИскомый=СвойствоУЭлементИскомый.Элемент(0);
			Иначе	
				СвойствоУЭлементИскомый=ДокументDOM.СоздатьЭлемент("Property");
				УЭлементИскомый.ДобавитьДочерний(СвойствоУЭлементИскомый);
			КонецЕсли;	
			
			МетодУЭлементИскомый=УЭлементИскомый.ПолучитьЭлементыПоИмени("Method");
			Если МетодУЭлементИскомый.Количество()>0 Тогда 
				МетодУЭлементИскомый=МетодУЭлементИскомый.Элемент(0);
			Иначе	
				МетодУЭлементИскомый=ДокументDOM.СоздатьЭлемент("Method");
				УЭлементИскомый.ДобавитьДочерний(МетодУЭлементИскомый);
			КонецЕсли;	
			
			ТипУЭлементИскомый=?(Элемент["ТипВосстановления"]="Свойство",СвойствоУЭлементИскомый,МетодУЭлементИскомый);
			
			ТипУЭлементИскомыйТекстУЭлементИскомый=ТипУЭлементИскомый.ПервыйДочерний;
			Если ТипУЭлементИскомыйТекстУЭлементИскомый=Неопределено Тогда
				ТипУЭлементИскомыйТекстУЭлементИскомый=ДокументDOM.СоздатьТекстовыйУзел(Элемент["ИмяВосстановления"]);
				ТипУЭлементИскомый.ДобавитьДочерний(ТипУЭлементИскомыйТекстУЭлементИскомый);
			Иначе
				ТипУЭлементИскомыйТекстУЭлементИскомый.ЗначениеУзла=Элемент["ИмяВосстановления"];
			КонецЕсли;	
			
			КонтентУЭлементИскомый=УЭлементИскомый.ПолучитьЭлементыПоИмени("Value");
			Для каждого УдУзел из КонтентУЭлементИскомый Цикл
				УЭлементИскомый.УдалитьДочерний(УдУзел);
			КонецЦикла;	
			
			Для каждого Знч из Элемент["Значения"] Цикл
				ЗначениеУЭлементИскомый=ДокументDOM.СоздатьЭлемент("Value");
				УЭлементИскомый.ДобавитьДочерний(ЗначениеУЭлементИскомый);
				
				ЗначениеТекстУЭлементИскомый=ДокументDOM.СоздатьТекстовыйУзел(ЗначениеВСтрокуВнутр(Знч));
				ЗначениеУЭлементИскомый.ДобавитьДочерний(ЗначениеТекстУЭлементИскомый);
			КонецЦикла;		
			
		КонецЦикла;
		
		//Сохранение состояния Реквизитов
		УзлыРеквизитов=Неопределено;
		УзлыРеквизитовМассив=УзелСостоянияИскомый.ПолучитьЭлементыПоИмени("Attributes");
		Если УзлыРеквизитовМассив.Количество()=0 Тогда
			УзлыРеквизитов=ДокументDOM.СоздатьЭлемент("Attributes");	
			УзелСостоянияИскомый.ДобавитьДочерний(УзлыРеквизитов);
		Иначе УзлыРеквизитов=УзлыРеквизитовМассив.Элемент(0);	
		КонецЕсли;	
		
		СписокУзловРеквизитов=Новый Массив();
		Для каждого УзелРеквизит из УзлыРеквизитов.ПолучитьЭлементыПоИмени("Attribute") Цикл
			УзелСтруктура=Новый Структура();
			
			УзелИмяРеквизита=УзелРеквизит.ПолучитьЭлементыПоИмени("Name");
			УзелСтруктура.Вставить("Имя",УзелИмяРеквизита.Элемент(0).ПервыйДочерний.ЗначениеУзла);
			
			УзелСтруктура.Вставить("Реквизит",УзелРеквизит);
			
			СписокУзловРеквизитов.Добавить(УзелСтруктура);
		КонецЦикла;
		
		Для каждого РеквизитФормы из РеквизитыДляСохранения Цикл
			УРеквизитИскомый=Неопределено;
			Для каждого УРеквизит из СписокУзловРеквизитов Цикл
				Если УРеквизит["Имя"]=РеквизитФормы["Имя"] Тогда УРеквизитИскомый=УРеквизит["Реквизит"];Прервать;КонецЕсли;
			КонецЦикла;
			
			Если УРеквизитИскомый=Неопределено Тогда
				УРеквизитИскомый=ДокументDOM.СоздатьЭлемент("Attribute");
				УзлыРеквизитов.ДобавитьДочерний(УРеквизитИскомый);
				
				ИмяУРеквизитИскомый=ДокументDOM.СоздатьЭлемент("Name");
				УРеквизитИскомый.ДобавитьДочерний(ИмяУРеквизитИскомый);
				ИмяТекстУРеквизитИскомый=ДокументDOM.СоздатьТекстовыйУзел(РеквизитФормы["Имя"]);
				ИмяУРеквизитИскомый.ДобавитьДочерний(ИмяТекстУРеквизитИскомый);
			КонецЕсли;
			
			УзелЗначениеУРеквизитИскомый=УРеквизитИскомый.ПолучитьЭлементыПоИмени("Value");
			Если УзелЗначениеУРеквизитИскомый.Количество()>0 Тогда
				УзелЗначениеУРеквизитИскомый=УзелЗначениеУРеквизитИскомый.Элемент(0);
				УРеквизитИскомый.УдалитьДочерний(УзелЗначениеУРеквизитИскомый);
			КонецЕсли;	
			
			УзелЗначениеУРеквизитИскомый=ДокументDOM.СоздатьЭлемент("Value");
			УРеквизитИскомый.ДобавитьДочерний(УзелЗначениеУРеквизитИскомый);
			
			ЗначениеТекстУРеквизитИскомый=ДокументDOM.СоздатьТекстовыйУзел(ЗначениеВСтрокуВнутр(РеквизитФормы["Значение"]));
			УзелЗначениеУРеквизитИскомый.ДобавитьДочерний(ЗначениеТекстУРеквизитИскомый);
		КонецЦикла;	
		
		//Запись XML
		ЗаписьXML=Новый ЗаписьXML();
		ЗаписьXML.ОткрытьФайл(ФайлНастроек.ПолноеИмя);
		ЗаписьDOM=Новый ЗаписьDOM();
		ЗаписьDOM.Записать(ДокументDOM,ЗаписьXML);
		ЗаписьXML.Закрыть();	
	Исключение
		Сообщить("Сохранить сосотяние формы не удалось."+Символы.ПС+ОписаниеОшибки(),СтатусСообщения.Важное);
	КонецПопытки;
КонецПроцедуры

Процедура СохранитьПризнакИспПоУмолВФайл(ПутьКФайлуТекущейОбработки,ИмяФайлаТекущейОбработки,ИмяФормы,
	ИмяСостояния, ИспользоватьПриОткрытии) Экспорт
	Попытка
		ФайлНастроек=Новый Файл(ПутьКФайлуТекущейОбработки+"GroupChangesSettings"+ИмяФайлаТекущейОбработки+".xml");	
		Если Не ФайлНастроек.Существует() Тогда Возврат ;КонецЕсли;
		
		ЧтениеXML=Новый ЧтениеXML();
		ЧтениеТекста=Новый ЧтениеТекста(ФайлНастроек.ПолноеИмя,,,,Ложь);
		СтрокаТекста=ЧтениеТекста.Прочитать();
		Если ПустаяСтрока(СтрокаТекста) Тогда 
			ЧтениеТекста.Закрыть();
			Возврат ;
		КонецЕсли;
		ЧтениеТекста.Закрыть();
		
		ЧтениеXML.ОткрытьФайл(ФайлНастроек.ПолноеИмя,,,);
		
		ПостроительDOM=Новый ПостроительDOM();
		ДокументDOM=ПостроительDOM.Прочитать(ЧтениеXML);
		ЧтениеXML.Закрыть();
		
		УзелФормыИскомый=Неопределено;
		УзелФорм=ДокументDOM.ПолучитьЭлементыПоИмени("Form");
		Если УзелФорм.Количество()>0 Тогда 
			Для каждого УзелФормы из УзелФорм Цикл
				УзелИмяФормы=УзелФормы.ПолучитьЭлементыПоИмени("Name");
				Если УзелИмяФормы.Количество()>0 И УзелИмяФормы.Элемент(0).ПервыйДочерний<>Неопределено
					И УзелИмяФормы.Элемент(0).ПервыйДочерний.ЗначениеУзла=ИмяФормы Тогда 
					УзелФормыИскомый=УзелФормы;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		
		Если УзелФормыИскомый=Неопределено Тогда Возврат ;КонецЕсли;
		
		ЕстьМод=Ложь;
		УзелСостояний=УзелФормыИскомый.ПолучитьЭлементыПоИмени("StatesSaved");
		Если УзелСостояний.Количество()>0 Тогда
			Для каждого Узел из УзелСостояний.Элемент(0).ДочерниеУзлы Цикл
				//Получить Имя состояния
				Имена=Узел.ПолучитьЭлементыПоИмени("Name");
				Если Имена.Количество()=0 Тогда Продолжить;КонецЕсли;
				УзелИмени=Имена.Элемент(0).ПервыйДочерний;
				Если УзелИмени=Неопределено Тогда Продолжить;КонецЕсли;
				
				Если УзелИмени.ЗначениеУзла<>ИмяСостояния Тогда Продолжить;КонецЕсли;
				
				//Получить признак Использовать при открытии
				UseOnOpens=Узел.ПолучитьЭлементыПоИмени("UseOnOpen");
				Если UseOnOpens.Количество()=0 Тогда Прервать;КонецЕсли;
				UseOnOpensЗначение=UseOnOpens.Элемент(0).ПервыйДочерний;
				UseOnOpens.Элемент(0).УдалитьДочерний(UseOnOpensЗначение);
				
				UseOnOpensЗначение=ДокументDOM.СоздатьТекстовыйУзел(Строка(Число(ИспользоватьПриОткрытии)));
				UseOnOpens.Элемент(0).ДобавитьДочерний(UseOnOpensЗначение);
				ЕстьМод=Истина;
			КонецЦикла;
		КонецЕсли;
		
		Если ЕстьМод Тогда
			//Запись XML
			ЗаписьXML=Новый ЗаписьXML();
			ЗаписьXML.ОткрытьФайл(ФайлНастроек.ПолноеИмя);
			ЗаписьDOM=Новый ЗаписьDOM();
			ЗаписьDOM.Записать(ДокументDOM,ЗаписьXML);
			ЗаписьXML.Закрыть();
		КонецЕсли;	
	Исключение
		Сообщить("Сохранить сосотяние формы не удалось."+Символы.ПС+ОписаниеОшибки(),СтатусСообщения.Важное);
	КонецПопытки;
КонецПроцедуры

Процедура УдалитьСостояниеФормыВФайле(ПутьКФайлуТекущейОбработки,ИмяФайлаТекущейОбработки,ИмяФормы,ИмяСостояния) Экспорт
	Попытка
		ФайлНастроек=Новый Файл(ПутьКФайлуТекущейОбработки+"GroupChangesSettings"+ИмяФайлаТекущейОбработки+".xml");	
		Если Не ФайлНастроек.Существует() Тогда Возврат ;КонецЕсли;
		
		ЧтениеXML=Новый ЧтениеXML();
		ЧтениеТекста=Новый ЧтениеТекста(ФайлНастроек.ПолноеИмя,,,,Ложь);
		СтрокаТекста=ЧтениеТекста.Прочитать();
		Если ПустаяСтрока(СтрокаТекста) Тогда 
			ЧтениеТекста.Закрыть();
			Возврат ;
		КонецЕсли;
		ЧтениеТекста.Закрыть();
		
		ЧтениеXML.ОткрытьФайл(ФайлНастроек.ПолноеИмя,,,);
		
		ПостроительDOM=Новый ПостроительDOM();
		ДокументDOM=ПостроительDOM.Прочитать(ЧтениеXML);
		ЧтениеXML.Закрыть();
		
		УзелФормыИскомый=Неопределено;
		УзелФорм=ДокументDOM.ПолучитьЭлементыПоИмени("Form");
		Если УзелФорм.Количество()>0 Тогда 
			Для каждого УзелФормы из УзелФорм Цикл
				УзелИмяФормы=УзелФормы.ПолучитьЭлементыПоИмени("Name");
				Если УзелИмяФормы.Количество()>0 И УзелИмяФормы.Элемент(0).ПервыйДочерний<>Неопределено
					И УзелИмяФормы.Элемент(0).ПервыйДочерний.ЗначениеУзла=ИмяФормы Тогда 
					УзелФормыИскомый=УзелФормы;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		
		Если УзелФормыИскомый=Неопределено Тогда Возврат ;КонецЕсли;
		
		ЕстьМод=Ложь;
		УзелСостояний=УзелФормыИскомый.ПолучитьЭлементыПоИмени("StatesSaved");
		Если УзелСостояний.Количество()>0 Тогда
			Для каждого Узел из УзелСостояний.Элемент(0).ДочерниеУзлы Цикл
				//Получить Имя состояния
				Имена=Узел.ПолучитьЭлементыПоИмени("Name");
				Если Имена.Количество()=0 Тогда Продолжить;КонецЕсли;
				УзелИмени=Имена.Элемент(0).ПервыйДочерний;
				Если УзелИмени=Неопределено Тогда Продолжить;КонецЕсли;
				
				Если УзелИмени.ЗначениеУзла<>ИмяСостояния Тогда Продолжить;КонецЕсли;
				
				//Удалить состояние
				УзелСостояний.Элемент(0).УдалитьДочерний(Узел);
				ЕстьМод=Истина;
			КонецЦикла;
		КонецЕсли;
		
		Если ЕстьМод Тогда
			//Запись XML
			ЗаписьXML=Новый ЗаписьXML();
			ЗаписьXML.ОткрытьФайл(ФайлНастроек.ПолноеИмя);
			ЗаписьDOM=Новый ЗаписьDOM();
			ЗаписьDOM.Записать(ДокументDOM,ЗаписьXML);
			ЗаписьXML.Закрыть();
		КонецЕсли;
	Исключение
		Сообщить("Удалить сосотяние формы не удалось."+Символы.ПС+ОписаниеОшибки(),СтатусСообщения.Важное);
	КонецПопытки;	
КонецПроцедуры	

Функция СравнитьСостояния(ТекущийМассивСостояний,СтруктурыДляСохраненияСостоянияФормы) Экспорт
	Если ТекущийМассивСостояний.Количество()<>СтруктурыДляСохраненияСостоянияФормы.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТекущийМассивСостояний.Количество()=0 И СтруктурыДляСохраненияСостоянияФормы.Количество()=0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Равны=Истина;
	КолЭлементов=ТекущийМассивСостояний.Количество();
	ТекущийМассивСостоянийЭлементов=ТекущийМассивСостояний[0];
	НовыйМассивСостоянийЭлементов=СтруктурыДляСохраненияСостоянияФормы[0];
	
	Для каждого НЭлемент из НовыйМассивСостоянийЭлементов Цикл
		ПоискЭлемента=Ложь;
		Для каждого Элемент из ТекущийМассивСостоянийЭлементов  Цикл
			Если Элемент[0]=НЭлемент["Имя"] Тогда  //Если равны имена
				ПоискЭлемента=Истина;
				Равны=Равны И НЭлемент.Количество()=Элемент.Количество(); 
				Если Не Равны Тогда Возврат Равны КонецЕсли;
				
				Равны=Равны И Элемент[1]=НЭлемент["ТипВосстановления"]   //Если  равен тип восстановления
					И Элемент[2]=НЭлемент["ИмяВосстановления"];  //и его имя
				
				КолЗнч=НЭлемент.Количество();
				
				Для н=3 по КолЗнч-1 Цикл
					Равны=Равны И Элемент[н]=ЗначениеВСтрокуВнутр(НЭлемент["Значения"][н-3]); 	
				КонецЦикла;
			КонецЕсли;	
		КонецЦикла;
		Равны=Равны И ПоискЭлемента;
		Если Не Равны Тогда Возврат Равны КонецЕсли;
	КонецЦикла;	
	
	Если КолЭлементов=1 Тогда Возврат Равны КонецЕсли;
	
	ТекущийМассивСостоянийЭлементов=ТекущийМассивСостояний[1];
	НовыйМассивСостоянийЭлементов=СтруктурыДляСохраненияСостоянияФормы[1];
	
	Для каждого НЭлемент из НовыйМассивСостоянийЭлементов Цикл
		ПоискЭлемента=Ложь;
		Для каждого Элемент из ТекущийМассивСостоянийЭлементов  Цикл
			Если Элемент[0]=НЭлемент["Имя"] Тогда
				ПоискЭлемента=Истина;
				Равны=Равны И  Элемент[1]=ЗначениеВСтрокуВнутр(НЭлемент["Значение"]);
			КонецЕсли;	
		КонецЦикла;
		Равны=Равны И ПоискЭлемента;
		Если Не Равны Тогда Возврат Равны КонецЕсли;
	КонецЦикла;
	
	Возврат Равны;
КонецФункции	
	
ШаблонПоиска="(\s+\{.*\s*[<\?>]*.*)" ;
ШаблонПоискаТекстаОшибки="(\}\s*:\s*.*\s*[<\?>]*.*)" ;
ШаблонПоискаСтроки= "\d+";

#Область ADOTypesMapping
ADOTypesMapping=Новый Соответствие();

КЧ20=Новый КвалификаторыЧисла(20,0,ДопустимыйЗнак.Любой);
ADOTypesMapping.Вставить(20,Новый ОписаниеТипов("Число",,,КЧ20,,,));

ADOTypesMapping.Вставить(128,Новый ОписаниеТипов("ДвоичныеДанные",,,,,,));
ADOTypesMapping.Вставить(11,Новый ОписаниеТипов("Булево",,,,,,));
ADOTypesMapping.Вставить(8,Новый ОписаниеТипов("Строка",,,,,,));
ADOTypesMapping.Вставить(136,Новый ОписаниеТипов("ДвоичныеДанные",,,,,,));
ADOTypesMapping.Вставить(129,Новый ОписаниеТипов("Строка",,,,,,));

КЧ6=Новый КвалификаторыЧисла(30,10,ДопустимыйЗнак.Любой);
ADOTypesMapping.Вставить(6,Новый ОписаниеТипов("Число",,,КЧ6,,,));

КД7=Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
ADOTypesMapping.Вставить(7,Новый ОписаниеТипов("Дата",,,,,КД7,));

ADOTypesMapping.Вставить(133,Новый ОписаниеТипов("Дата",,,,,КД7,));

КД134=Новый КвалификаторыДаты(ЧастиДаты.Время);
ADOTypesMapping.Вставить(134,Новый ОписаниеТипов("Дата",,,,,КД134,));

ADOTypesMapping.Вставить(135,Новый ОписаниеТипов("Дата",,,,,КД7,));

КЧ14=Новый КвалификаторыЧисла(31,15,ДопустимыйЗнак.Любой);
ADOTypesMapping.Вставить(14,Новый ОписаниеТипов("Число",,,КЧ14,,,));

КЧ5=Новый КвалификаторыЧисла(46,30,ДопустимыйЗнак.Любой);
ADOTypesMapping.Вставить(5,Новый ОписаниеТипов("Число",,,КЧ5,,,));

ADOTypesMapping.Вставить(0,Новый ОписаниеТипов("Строка",,,,,,));

КЧ10=Новый КвалификаторыЧисла(11,0,ДопустимыйЗнак.Любой);
ADOTypesMapping.Вставить(10,Новый ОписаниеТипов("Число",,,КЧ10,,,));

КЧ64=Новый КвалификаторыЧисла(21,0,ДопустимыйЗнак.Любой);
ADOTypesMapping.Вставить(64,Новый ОписаниеТипов("Число",,,КЧ64,,,));

ADOTypesMapping.Вставить(72,Новый ОписаниеТипов("УникальныйИдентификатор",,,,,,));

КЧ3=Новый КвалификаторыЧисла(11,0,ДопустимыйЗнак.Любой);
ADOTypesMapping.Вставить(3,Новый ОписаниеТипов("Число",,,КЧ3,,,));

ADOTypesMapping.Вставить(205,Новый ОписаниеТипов("ДвоичныеДанные",,,,,,));
ADOTypesMapping.Вставить(201,Новый ОписаниеТипов("Строка",,,,,,));
ADOTypesMapping.Вставить(203,Новый ОписаниеТипов("Строка",,,,,,));

КЧ131=Новый КвалификаторыЧисла(31,15,ДопустимыйЗнак.Любой);
ADOTypesMapping.Вставить(131,Новый ОписаниеТипов("Число",,,КЧ131,,,));

КЧ4=Новый КвалификаторыЧисла(16,7,ДопустимыйЗнак.Любой);
ADOTypesMapping.Вставить(4,Новый ОписаниеТипов("Число",,,КЧ4,,,));

КЧ2=Новый КвалификаторыЧисла(5,0,ДопустимыйЗнак.Любой);
ADOTypesMapping.Вставить(2,Новый ОписаниеТипов("Число",,,КЧ2,,,));

КЧ16=Новый КвалификаторыЧисла(3,0,ДопустимыйЗнак.Любой);
ADOTypesMapping.Вставить(16,Новый ОписаниеТипов("Число",,,КЧ16,,,));

КЧ21=Новый КвалификаторыЧисла(21,0,ДопустимыйЗнак.Любой);
ADOTypesMapping.Вставить(21,Новый ОписаниеТипов("Число",,,КЧ21,,,));

КЧ19=Новый КвалификаторыЧисла(11,0,ДопустимыйЗнак.Любой);
ADOTypesMapping.Вставить(19,Новый ОписаниеТипов("Число",,,КЧ19,,,));

КЧ18=Новый КвалификаторыЧисла(5,0,ДопустимыйЗнак.Любой);
ADOTypesMapping.Вставить(18,Новый ОписаниеТипов("Число",,,КЧ18,,,));

КЧ17=Новый КвалификаторыЧисла(3,0,ДопустимыйЗнак.Любой);
ADOTypesMapping.Вставить(17,Новый ОписаниеТипов("Число",,,КЧ17,,,));

ADOTypesMapping.Вставить(132,Новый ОписаниеТипов("Строка",,,,,,));
ADOTypesMapping.Вставить(204,Новый ОписаниеТипов("ДвоичныеДанные",,,,,,));
ADOTypesMapping.Вставить(200,Новый ОписаниеТипов("Строка",,,,,,));
ADOTypesMapping.Вставить(139,Новый ОписаниеТипов("Число",,,,,,));
ADOTypesMapping.Вставить(202,Новый ОписаниеТипов("Строка",,,,,,));
ADOTypesMapping.Вставить(130,Новый ОписаниеТипов("Строка",,,,,,));
#КонецОбласти

#Область ADOTypesMappingnNames
ADOTypesMappingnNames=Новый Соответствие();

ADOTypesMappingnNames.Вставить(20,"adBigInt");
ADOTypesMappingnNames.Вставить(128,"adBinary"); 
ADOTypesMappingnNames.Вставить(11,"adBoolean"); 
ADOTypesMappingnNames.Вставить(8,"adBSTR"); 
ADOTypesMappingnNames.Вставить(136,"adChapter");	
ADOTypesMappingnNames.Вставить(129,"adChar");
ADOTypesMappingnNames.Вставить(6,"adCurrency");
ADOTypesMappingnNames.Вставить(7,"adDate");
ADOTypesMappingnNames.Вставить(133,"adDBDate");
ADOTypesMappingnNames.Вставить(134,"adDBTime");
ADOTypesMappingnNames.Вставить(135,"adDBTimeStamp");
ADOTypesMappingnNames.Вставить(14,"adDecimal");
ADOTypesMappingnNames.Вставить(5,"adDouble");
ADOTypesMappingnNames.Вставить(0,"adEmpty");
ADOTypesMappingnNames.Вставить(10,"adError");
ADOTypesMappingnNames.Вставить(64,"adFileTime");
ADOTypesMappingnNames.Вставить(72,"adGUID");
ADOTypesMappingnNames.Вставить(3,"adInteger");
ADOTypesMappingnNames.Вставить(205,"adLongVarBinary");
ADOTypesMappingnNames.Вставить(201,"adLongVarChar");
ADOTypesMappingnNames.Вставить(203,"adLongVarWChar");
ADOTypesMappingnNames.Вставить(131,"adNumeric");
ADOTypesMappingnNames.Вставить(4,"adSingle");
ADOTypesMappingnNames.Вставить(2,"adSmallInt");
ADOTypesMappingnNames.Вставить(16,"adTinyInt");
ADOTypesMappingnNames.Вставить(21,"adUnsignedBigInt");
ADOTypesMappingnNames.Вставить(19,"adUnsignedInt");
ADOTypesMappingnNames.Вставить(18,"adUnsignedSmallInt");
ADOTypesMappingnNames.Вставить(17,"adUnsignedTinyInt");
ADOTypesMappingnNames.Вставить(132,"adUserDefined");
ADOTypesMappingnNames.Вставить(204,"adVarBinary");
ADOTypesMappingnNames.Вставить(200,"adVarChar");
ADOTypesMappingnNames.Вставить(139,"adVarNumeric");
ADOTypesMappingnNames.Вставить(202,"adVarWChar");
ADOTypesMappingnNames.Вставить(130,"adWChar");
#КонецОбласти
